namespace CommonDomain.Generators.Generators.AggregateRoots;

[Generator]
public class AbstractAggregateRootGenerator : IIncrementalGenerator
{
    private const string Namespace = "Generators.Domain.Common";

    private const string Name = "AggregateRoot";
    
    private const string SourceCode = $@"// <auto-generated/>
using Generators.Interfaces;
using System.Collections.Generic;

namespace {Namespace};

public abstract partial class AggregateRoot<TId> : Entity<TId> where TId : IEntityId<TId>
{{
    private readonly List<IDomainEvent> _domainEvents = new();
    public IReadOnlyCollection<IDomainEvent> DomainEvents => _domainEvents.AsReadOnly();
    protected void AddDomainEvent(IDomainEvent domainEvent)
    {{
        _domainEvents.Add(domainEvent);
    }}
    
    protected AggregateRoot(TId id) : base(id)
    {{
    }}

    protected AggregateRoot() : base(TId.CreateUniqueId()) {{ }}
}}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Add the marker attribute to the compilation.
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            $"{Name}.g.cs",
            SourceText.From(SourceCode, Encoding.UTF8)));
    }
}