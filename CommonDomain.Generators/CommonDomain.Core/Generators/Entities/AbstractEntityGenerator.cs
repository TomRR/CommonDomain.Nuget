namespace CommonDomain.Core.Generators.Entities;

[Generator]
public class AbstractEntityGenerator : IIncrementalGenerator
{
    private const string Namespace = "Generators.Domain.Common";

    private const string Name = "Entity";
    
    private const string SourceCode = $@"// <auto-generated/>
using System;

namespace {Namespace};

public abstract partial class Entity<TId> where TId : IEntityId<TId>
{{
    protected TId Id {{ get; init; }}

    protected Entity(TId id)
    {{
        ArgumentNullException.ThrowIfNull(id);
        Id = id;
    }}

    public override int GetHashCode() => Id.GetHashCode();

    public override bool Equals(object? obj) => Equals(obj as Entity<TId>);

    private bool Equals(Entity<TId>? other)
    {{
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;
        if (other.GetType() != GetType()) return false;

        return Id.Equals(other.Id);
    }}
}}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Add the marker attribute to the compilation.
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            $"{Name}.g.cs",
            SourceText.From(SourceCode, Encoding.UTF8)));
    }
}